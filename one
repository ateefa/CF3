# n, k, m = list(map(int, input().split()))
# A = list(map(int, input().split()))
 
# A.sort()
# sum_A = sum(A)
# avg = sum_A / n
 
# i = 0
 
# potential = lambda n, k, m: (min(k * n, m)) / n
# avg_subtracted = lambda s, n, a: (s - a) / (n - 1)
 
# while n > 1 and m > 0 and i < len(A) \
#     and (avg_subtracted(sum_A, n, A[i]) + potential(n-1, k, m-1)) >= \
#         (avg + potential(n, k, m)):
#     sum_A -= A[i]
#     n -= 1
#     avg = sum_A / n
#     i += 1
#     m -= 1
 
# if i < len(A):
#     avg += potential(n, k, m)
 
# print(avg)


n_super, max_increase, max_op = list(map(int, input().strip().split()))
 
powers = list(map(int, input().strip().split()))
powers = sorted(powers)
 
curr_sum = sum(powers)
best_score = float("-inf")
for idx in range(n_super):
    n_remaining_hero = n_super - idx
    n_remaining_actions = max_op - idx
    if n_remaining_actions < 0:
        break
    this_score = curr_sum/n_remaining_hero + min(max_increase, n_remaining_actions/n_remaining_hero)
    if this_score > best_score:
        best_score = this_score
    curr_sum -= powers[idx]
    print(best_score)



# n, k = map(int, input().split())
# arr = list(map(int, input().split()))
# occs = dict()
# for v in arr:
#     if v not in occs:
#         occs[v] = 0
#     occs[v] += 1
# left, right, ans = 1, 200000, list()

# def canGenerate():
# 	cnt = 0
# 	for value in occs:
# 		occurrences = occs[value]
# 		cnt += occurrences // mid
# 	return cnt >= k
 
# while left < right:
# 	mid = (left + right + 1) // 2
# 	if canGenerate():
# 		left = mid
# 	else:
# 		right = mid - 1
# for value in occs:
#     occurrences = occs[value]
#     ans.extend((occurrences // right) * [value])
# print(*ans[:k])
